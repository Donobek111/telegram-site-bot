import os
import io
import json
import datetime
import logging
import base64
import tempfile
import requests
import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile, Message
from aiogram.filters import Command

# ---------------------------
# CONFIG (–≤—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã)
# ---------------------------
BOT_TOKEN = "7816366790:AAGFyFNOTm08JIn3abYz3LJHuNCyEIz9CjY"
OPENROUTER_API_KEY = "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"
if BOT_TOKEN.startswith("–í–ê–®_") or OPENROUTER_API_KEY.startswith("–í–ê–®_"):
    raise RuntimeError("–í—Å—Ç–∞–≤—å BOT_TOKEN –∏ OPENROUTER_API_KEY –≤ –∫–æ–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
bot = Bot(token="7816366790:AAGFyFNOTm08JIn3abYz3LJHuNCyEIz9CjY")
dp = Dispatcher()
router = Router()

DATA_FILE = "users.json"  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CHAT_MEM_FILE = "chat_mem.json"  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

# ---------------------------
# HELPERS: load/save JSON
# ---------------------------

def load_json(path):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


users = load_json(DATA_FILE)  # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: users[user_id] = {fields...}
chat_mem = load_json(CHAT_MEM_FILE)  # structure: chat_mem[user_id] = [ {role, content}, ... ]

# ---------------------------
# MENU
# ---------------------------

def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí¨ –ß–∞—Ç —Å –ò–ò"), KeyboardButton(text="üåê –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç")],
            [KeyboardButton(text="üöÄ –õ–∏–º–∏—Ç"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
    )

# ---------------------------
# INIT USER
# ---------------------------

def ensure_user(user_id: str):
    today = str(datetime.date.today())
    if user_id not in users:
        users[user_id] = {
            "daily_limit_base": 3,
            "used_today": 0,
            "total_sites": 0,
            "referrals": 0,
            "joined": today,
            "last_reset": today
        }
        save_json(DATA_FILE, users)
    # safety: ensure keys exist
    u = users[user_id]
    if "daily_limit_base" not in u:
        u["daily_limit_base"] = 3
    if "used_today" not in u:
        u["used_today"] = 0
    if "total_sites" not in u:
        u["total_sites"] = 0
    if "referrals" not in u:
        u["referrals"] = 0
    if "joined" not in u:
        u["joined"] = str(datetime.date.today())
    if "last_reset" not in u:
        u["last_reset"] = str(datetime.date.today())
    save_json(DATA_FILE, users)


def reset_if_new_day(user_id: str):
    today = str(datetime.date.today())
    if users[user_id]["last_reset"] != today:
        users[user_id]["used_today"] = 0
        users[user_id]["last_reset"] = today
        save_json(DATA_FILE, users)

# ---------------------------
# USER MODES
# ---------------------------
# mode_map[user_id] = "menu" | "chat" | "site_step_N" ...
mode_map = {}


def set_mode(user_id: str, mode: str):
    mode_map[user_id] = mode


def get_mode(user_id: str):
    return mode_map.get(user_id, "menu")

# ---------------------------
# OPENROUTER INTERFACE
# ---------------------------

OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"


def ask_openrouter_messages(messages):
    """
    messages: list of dicts like [{"role":"user","content": "text"}, ...]
    returns assistant content string or raises
    """
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "gpt-4o-mini",
        "messages": messages
    }
    r = requests.post(OPENROUTER_URL, headers=headers, json=payload, timeout=60)
    r.raise_for_status()
    resp = r.json()
    return resp["choices"][0]["message"]["content"]


def ask_openrouter_with_image(user_text, image_path):
    """ Sends a message with an embedded image as base64 to OpenRouter. Returns assistant text. """
    with open(image_path, "rb") as f:
        b = f.read()
    img_b64 = base64.b64encode(b).decode("utf-8")
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    content = [
        {"type": "text", "text": user_text},
        {"type": "image_url", "image_url": f"data:image/jpeg;base64,{img_b64}"}
    ]
    payload = {
        "model": "gpt-4o-mini",
        "messages": [{"role": "user", "content": content}]
    }
    r = requests.post(OPENROUTER_URL, headers=headers, json=payload, timeout=120)
    r.raise_for_status()
    resp = r.json()
    return resp["choices"][0]["message"]["content"]

# ---------------------------
# HANDLERS
# ---------------------------

@router.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    args = message.text.split()
    user_id = str(message.from_user.id)
    ensure_user(user_id)
    # referral
    if len(args) > 1:
        ref = args[1]
        if ref != user_id and ref in users:
            users[ref]["referrals"] = users[ref].get("referrals", 0) + 1
            save_json(DATA_FILE, users)
            try:
                await bot.send_message(int(ref), "üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî +1 –∫ –ª–∏–º–∏—Ç—É —Å–µ–≥–æ–¥–Ω—è!")
            except Exception:
                pass
    set_mode(user_id, "menu")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–ú–µ–Ω—é:\n"
        "‚Ä¢ üí¨ –ß–∞—Ç —Å –ò–ò ‚Äî –æ–±—â–∞–π—Å—è –∫–∞–∫ ChatGPT (–ø–æ–º–Ω—é 50 —Å–æ–æ–±—â–µ–Ω–∏–π)\n ‚Ä¢ üåê –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç ‚Äî –±–æ—Ç –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–¥–∞—ë—Ç HTML\n"
        "‚Ä¢ üöÄ –õ–∏–º–∏—Ç ‚Äî —Å–∫–æ–ª—å–∫–æ —Å–∞–π—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî —Ç–≤–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ ‚Äî –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã\n"
        "‚Ä¢ ‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        reply_markup=main_menu()
    )

# Buttons (text exact match)
@router.message(F.text == "üí¨ –ß–∞—Ç —Å –ò–ò")
async def btn_chat(message: Message):
    user_id = str(message.from_user.id)
    ensure_user(user_id)
    set_mode(user_id, "chat")
    chat_mem.setdefault(user_id, [])
    save_json(CHAT_MEM_FILE, chat_mem)
    await message.answer("üí¨ –†–µ–∂–∏–º —á–∞—Ç–∞ –≤–∫–ª—é—á—ë–Ω. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî /exit")

@router.message(F.text == "üåê –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç")
async def btn_create(message: Message):
    user_id = str(message.from_user.id)
    ensure_user(user_id)
    reset_if_new_day(user_id)
    limit_total = users[user_id]["daily_limit_base"] + users[user_id].get("referrals", 0)
    if users[user_id]["used_today"] >= limit_total:
        await message.answer("üö´ –õ–∏–º–∏—Ç —Å–∞–π—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å +1.")
        return
    set_mode(user_id, "site_step_type")
    await message.answer(
        "üìù –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Å–∞–π—Ç. –°–Ω–∞—á–∞–ª–∞ ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–∏–ø (–Ω–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É):\n"
        "1 ‚Äî –í–∏–∑–∏—Ç–∫–∞\n2 ‚Äî –ë–ª–æ–≥\n3 ‚Äî –õ–µ–Ω–¥–∏–Ω–≥\n4 ‚Äî –ú–∞–≥–∞–∑–∏–Ω\n5 ‚Äî –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n6 ‚Äî –†–µ–∑—é–º–µ\n7 ‚Äî –ù–æ–≤–æ—Å—Ç–∏\n8 ‚Äî –û–±—É—á–µ–Ω–∏–µ\n"
    )

@router.message(F.text == "üöÄ –õ–∏–º–∏—Ç")
async def btn_limit(message: Message):
    user_id = str(message.from_user.id)
    ensure_user(user_id)
    reset_if_new_day(user_id)
    total = users[user_id]["daily_limit_base"] + users[user_id].get("referrals", 0)
    left = max(0, total - users[user_id]["used_today"])
    await message.answer(f"üöÄ –°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â—ë {left} —Å–∞–π—Ç–æ–≤ (–≤—Å–µ–≥–æ {total}).")

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def btn_stats(message: Message):
    user_id = str(message.from_user.id)
    ensure_user(user_id)
    reset_if_new_day(user_id)
    u = users[user_id]
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–∞–π—Ç–æ–≤: {u.get('total_sites',0)}\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {u.get('used_today',0)}\n"
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {u.get('referrals',0)}\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {u.get('joined')}"
    )

@router.message(F.text == "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
async def btn_invite(message: Message):
    user_id = str(message.from_user.id)
    ensure_user(user_id)
    try:
        me = await bot.get_me()
        bot_username = me.username if hasattr(me, "username") else None
    except Exception:
        bot_username = None
    if not bot_username:
        link = f"https://t.me/YourBot?start={user_id}"
    else:
        link = f"https://t.me/{bot_username}?start={user_id}"
    await message.answer(f"ü§ù –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π:\n{link}\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ ‚Äî +1 –∫ –ª–∏–º–∏—Ç—É –Ω–∞ –¥–µ–Ω—å.")

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def btn_help(message: Message):
    await message.answer("‚ÑπÔ∏è –ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n–ü–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @xxsint\n\n–ö–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å HTML: –æ—Ç–∫—Ä–æ–π Netlify / Vercel / GitHub Pages –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª index.html")

@router.message(Command(commands=["exit"]))
async def cmd_exit(message: Message):
    user_id = str(message.from_user.id)
    set_mode(user_id, "menu")
    await message.answer("üè† –í–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é.", reply_markup=main_menu())

# Photo handler (only used in chat mode)
@router.message(F.photo)
async def handle_photo(message: Message):
    user_id = str(message.from_user.id)
    mode = get_mode(user_id)
    if mode != "chat":
        await message.answer("üì∏ –§–æ—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Ä–µ–∂–∏–º–µ '–ß–∞—Ç —Å –ò–ò' (–∫–Ω–æ–ø–∫–∞ ¬´üí¨ –ß–∞—Ç —Å –ò–ò¬ª).")
        return
    # download highest-res photo to temp file
    photo = message.photo[-1]  # PhotoSize
    tmp_path = None
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmpf:
            tmp_path = tmpf.name
            # Try multiple download methods (compatibility between aiogram versions)
            try:
                # Method A: get file info and download by file_path
                f_info = await bot.get_file(photo.file_id)
                # aiogram 3: bot.download_file may not exist in some builds; try file.download()
                try:
                    # If File object supports download
                    await f_info.download(destination=tmp_path)
                except Exception:
                    # Fallback: try bot.download_file (older/newer builds)
                    try:
                        await bot.download_file(f_info.file_path, tmp_path)
                    except Exception:
                        # Last fallback: PhotoSize.download (if available)
                        await photo.download(destination=tmp_path)
            except Exception:
                # If anything failed, try PhotoSize.download directly
                try:
                    await photo.download(destination=tmp_path)
                except Exception as e:
                    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ç–æ: {e}")
        caption = message.caption or "–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"
        await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        try:
            reply = ask_openrouter_with_image(caption, tmp_path)
        except Exception as e:
            reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter: {e}"
        # save memory: user message + assistant reply
        chat_mem[user_id] = chat_mem.get(user_id, []) + [{"role":"user","content":caption}, {"role":"assistant","content":reply}]
        if len(chat_mem[user_id]) > 100:
            chat_mem[user_id] = chat_mem[user_id][-100:]
        save_json(CHAT_MEM_FILE, chat_mem)
        await message.answer(reply)
    finally:
        if tmp_path:
            try:
                os.remove(tmp_path)
            except Exception:
                pass

# General text handler: catches all text messages (buttons handled above first)
@router.message(F.text & ~F.via_bot)
async def all_text_handler(message: Message):
    user_id = str(message.from_user.id)
    ensure_user(user_id)
    mode = get_mode(user_id)
    text = message.text.strip()
    # ------------- CHAT MODE -------------
    if mode == "chat":
        chat_mem.setdefault(user_id, [])
        chat_mem[user_id].append({"role":"user","content": text})
        if len(chat_mem[user_id]) > 100:
            chat_mem[user_id] = chat_mem[user_id][-100:]
        save_json(CHAT_MEM_FILE, chat_mem)
        await message.answer("üß† –î—É–º–∞—é...")
        msgs = []
        for item in chat_mem[user_id]:
            role = item.get("role", "user")
            content = item.get("content", "")
            msgs.append({"role": role, "content": content})
        try:
            reply = ask_openrouter_messages(msgs)
        except Exception as e:
            reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenRouter: {e}"
        chat_mem[user_id].append({"role":"assistant","content":reply})
        if len(chat_mem[user_id]) > 100:
            chat_mem[user_id] = chat_mem[user_id][-100:]
        save_json(CHAT_MEM_FILE, chat_mem)
        await message.answer(reply)
        return
    # ------------- SITE CREATION FLOW -------------
    # modes: site_step_type -> site_step_topic -> site_step_audience -> site_step_style -> generate
    if mode and mode.startswith("site_step"):
        temp_key = f"site_draft_{user_id}"
        temp = users.get(temp_key, {})
    # ---------------- –°–ê–ô–¢ ----------------
    if mode.startswith("site_step"):
        temp_key = f"site_draft_{user_id}"
        temp = users.get(temp_key, {})
    # –®–∞–≥ 1 ‚Äî —Ç–∏–ø —Å–∞–π—Ç–∞
    if mode == "site_step_type":
        site_types = {
            "1": "–í–∏–∑–∏—Ç–∫–∞",
            "2": "–ë–ª–æ–≥",
            "3": "–õ–µ–Ω–¥–∏–Ω–≥",
            "4": "–ú–∞–≥–∞–∑–∏–Ω",
            "5": "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
            "6": "–†–µ–∑—é–º–µ",
            "7": "–ù–æ–≤–æ—Å—Ç–∏",
            "8": "–û–±—É—á–µ–Ω–∏–µ"
        }
        temp["type"] = site_types.get(text, text)
        users[temp_key] = temp
        set_mode(user_id, "site_step_topic")
        await message.answer("üìå –ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–∞–π—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–π –±–ª–æ–≥, –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞)")
        return
    # –®–∞–≥ 2 ‚Äî —Ç–µ–º–∞ —Å–∞–π—Ç–∞
    elif mode == "site_step_topic":
        temp["topic"] = text
        users[temp_key] = temp
        set_mode(user_id, "site_step_audience")
        await message.answer("üéØ –ö–∞–∫–∞—è –±—É–¥–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—è —Å–∞–π—Ç–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–∏–∑–∞–π–Ω–µ—Ä—ã, –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏, —Å—Ç—É–¥–µ–Ω—Ç—ã)")
        return
    # –®–∞–≥ 3 ‚Äî –∞—É–¥–∏—Ç–æ—Ä–∏—è —Å–∞–π—Ç–∞
    elif mode == "site_step_audience":
        temp["audience"] = text
        users[temp_key] = temp
        set_mode(user_id, "site_step_style")
        await message.answer("üé® –í –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–π—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–∏–Ω–∏–º–∞–ª–∏–∑–º, —Ñ—É—Ç—É—Ä–∏–∑–º, –±–∏–∑–Ω–µ—Å)")
        return
    # –®–∞–≥ 4 ‚Äî —Å—Ç–∏–ª—å —Å–∞–π—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ HTML
    elif mode == "site_step_style":
        temp["style"] = text
        users[temp_key] = temp
        set_mode(user_id, "menu")
        topic = temp.get("topic", "–ú–æ–π —Å–∞–π—Ç")
        site_type = temp.get("type", "–°–∞–π—Ç")
        audience = temp.get("audience", "")
        style = temp.get("style", "")
        html = f"""<!doctype html>
<html lang="ru">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>{topic}</title>
<style>
:root {{ --bg:#fff; --fg:#111; --accent:#4f46e5; }}
body{{font-family:Arial,Helvetica,sans-serif;margin:0;padding:24px;background:linear-gradient(135deg,#f3f4f6,#fff);color:var(--fg)}}
.header{{max-width:900px;margin:0 auto;text-align:center;padding:40px 20px}} h1{{color:var(--accent);margin-bottom:8px}} .lead{{color:#374151}} .section{{max-width:900px;margin:24px auto;padding:20px;background:#ffffff;border-radius:10px;box-shadow:0 6px 18px rgba(15,23,42,0.06)}} .row{{display:flex;flex-wrap:wrap;gap:16px}} .card{{flex:1;min-width:220px;padding:16px;border-radius:8px;background:#fafafa}} footer{{text-align:center;padding:28px;color:#6b7280}} @media(max-width:640px){{.row{{flex-direction:column}}}}
</style>
</head>
<body>
<div class="header">
<h1>{topic}</h1>
<div class="lead">{site_type} ‚Äî –¥–ª—è {audience}. –°—Ç–∏–ª—å: {style}.</div>
</div>
<div class="section">
<h2>–û –ø—Ä–æ–µ–∫—Ç–µ</h2>
<p>–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: —Å–∞–π—Ç —Ç–∏–ø–∞ {site_type}. –ù–∞–ø–æ–ª–Ω–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –¥–æ–±–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>
<div class="row">
<div class="card"><h3>–£—Å–ª—É–≥–∏</h3><p>–û–ø–∏—à–∏ —É—Å–ª—É–≥–∏ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã.</p></div>
<div class="card"><h3>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ</h3><p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç.</p></div>
<div class="card"><h3>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h3><p>–£–∫–∞–∂–∏ e-mail –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏.</p></div>
</div>
</div>
<footer>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–º ü§ñ ‚Äî –ü–æ–¥–∫–ª—é—á–∏ —Å–≤–æ–∏ —Ç–µ–∫—Å—Ç—ã –∏ –æ–ø—É–±–ª–∏–∫—É–π –Ω–∞ Netlify / Vercel / GitHub Pages</footer>
</body>
</html>"""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        reset_if_new_day(user_id)
        users[user_id]["used_today"] = users[user_id].get("used_today", 0) + 1
        users[user_id]["total_sites"] = users[user_id].get("total_sites", 0) + 1
        users.pop(temp_key, None)
        save_json(DATA_FILE, users)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        file = io.BytesIO(html.encode("utf-8"))
        input_file = InputFile(file, filename="site.html")
        await message.answer_document(
            input_file,
            caption=(
                "‚úÖ –°–∞–π—Ç –≥–æ—Ç–æ–≤!\n\n"
                "üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n"
                "1Ô∏è‚É£ Netlify ‚Äî –ø–µ—Ä–µ—Ç–∞—â–∏ site.html\n"
                "2Ô∏è‚É£ GitHub Pages ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω—É–π –≤ index.html –∏ –∑–∞–≥—Ä—É–∑–∏\n"
                "3Ô∏è‚É£ Vercel ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å —Ñ–∞–π–ª –≤ –ø—Ä–æ–µ–∫—Ç\n\n"
                "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Äî /start"
            ),
            reply_markup=main_menu()
        )
        return
    # ------------- MENU (default) -------------
    await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª ‚Äî –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.", reply_markup=main_menu())

# ---------------------------
# Register router & run
# ---------------------------

dp.include_router(router)

async def main():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (aiogram 3.x)!")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

    if __name__ == "__main__":
        import asyncio
        asyncio.run(main())